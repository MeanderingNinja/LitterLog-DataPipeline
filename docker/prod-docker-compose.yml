# Before using docker compose to spin the containers up, 
# Make sure DATABASE_URL in CatDataSchema/config.py and sqlalchemy.url in CatDataSchema/alembic.ini 
# to match the DATABASE_URL defined here: 
# postgresql+psycopg2://metabase_catwatcher_user:metabase_catwatcher_pw@db:5432/metabase_catwatcher_db

# 20230221: the database url is the same as the one in the local build. 
# So I don't need to manually modify DATABASE_URL in CatDataSchema/config.py and sqlalchemy.url in CatDataSchema/alembic.ini anymore

##########################################################################################################################################
# 20230322:
# To spin up the two containers, change your directory to `docker`, then run:
# `sudo docker compose -f prod-docker-compose.yml up`

# To check if the datawatcher is loading data into the database, first find the name of the running bd container with `sudo docker ps`,
# Then run: sudo docker exec -it docker-db-1 psql -U catwatcher_user catwatcher_db -W 
# Type in the password after the prompt. This will start the `psql` command-line tool. 
# The use SQL to check (catwatcher_db=# SELECT * FROM cat_data_schema.cat_data;)

# To kill the container, run `sudo docker compose -f prod-docker-compose.yml down --volumes` 
# Add --volume at the end of the command if you want to delete the named volume as well. 
##########################################################################################################################################
version: '3.8' 

services:
  db:
    image: postgres
    volumes:
      - type: volume
        source: db_data   # Will be created on the host machine (check /var/lib/docker/volumes)
        target: /var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_USER: catwatcher_user
      POSTGRES_PASSWORD: catwatcher_pw
      POSTGRES_DB: catwatcher_db
    ports: 
      - 5431:5432   # 5431 on the cattechserver might have been used by my experiment on setting up postgres and metabase with docker

  datawatcher:
    image: cat_data_watcher:latest
    volumes:
      - type: bind # Using bind mount because I want existing data in /var/nfs/cat_watcher_output to be mounted to the docker container 
        source: /var/nfs/cat_watcher_output 
        target: /usr/cat_watcher_output
    restart: always
    depends_on:
      - db
    environment:
      CAT_DATA_DMZ: /usr/cat_watcher_output  # This environment variable is called in cli.py
      DATABASE_URL: postgresql+psycopg2://catwatcher_user:catwatcher_pw@db:5432/catwatcher_db 
    # cat_data_migrate, cat_data_watcher is command line tool made available from using this image
    # command: bash -c "sleep 5 && cat_data_migrate && cat_data_watcher" 
    command: bash -c "sleep 5 && cat_data_watcher" 

volumes:
  db_data:

